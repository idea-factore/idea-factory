# Use the latest 2.1 version of CircleCI pipeline process engine. 
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

orbs:
  # The Node.js orb contains a set of prepackaged CircleCI configuration you can utilize
  # Orbs reduce the amount of configuration required for common tasks. 
  # See the orb documentation here: https://circleci.com/developer/orbs/orb/circleci/node
  node: circleci/node@4.1
  codecov: codecov/codecov@1.2.1
  cypress: cypress-io/cypress@1.28.0
  stackhawk: stackhawk/stackhawk@1.0.2


jobs:
  # Below is the definition of your job to build and test your app, you can rename and customize it as you want.
  lint:  
    # These next lines define a Docker executor: https://circleci.com/docs/2.0/executor-types/
    # You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # A list of available CircleCI Docker Convenience Images are available here: https://circleci.com/developer/images/image/cimg/node
    docker:
      - image: cimg/node:15.1
    # Then run your tests!
    # CircleCI will report the results back to your VCS provider.
    steps:
      # Checkout the code as the first step.
      - checkout
      # Next, the node orb's install-packages step will install the dependencies from a package.json.
      # The orb install-packages step will also automatically cache them for faster future runs.
      - node/install-packages:
          pkg-manager: yarn
      # If you are using yarn instead npm, remove the line above and uncomment the two lines below.
      - run:
          name: Check Styling
          command: yarn check-styling
  dev-deploy:
    docker:
      - image: cimg/node:15.1
    steps:
      - run:
          name: deploy dev
          command: curl https://api.render.com/deploy/srv-c2qipjb2v8p1q1jmcom0?key=PDeA5VT8bdQ && sleep 10
  test:
    # docker, working_dir, etc
    docker:
      - image: cimg/node:15.1
    steps:
      - run:
          # Decrypt the git_deploy_key.enc key into /tmp/git_deploy_key
          - openssl aes-256-cbc -d -K $REPO_ENC_KEY -iv $REPO_ENC_IV -in git_deploy_key.enc -out /tmp/git_deploy_key
          # Make sure only the current user can read the private key
          - chmod 600 /tmp/git_deploy_key
          # Create a script to return the passphrase environment variable to ssh-add
          - echo 'echo ${SSL_PASSPHRASE}' > /tmp/askpass && chmod +x /tmp/askpass
          # Start the authentication agent
          - eval "$(ssh-agent -s)"
          # Add the key to the authentication agent
          - DISPLAY=":0.0" SSH_ASKPASS="/tmp/askpass" setsid ssh-add /tmp/git_deploy_key </dev/null
  test-release:
    docker:
      - image: cimg/node:15.1
    steps:
      - checkout
      - npx semantic-release -d

  release:
    docker:
      - image: cimg/node:15.1
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - '61:73:0c:1b:71:ae:bd:65:bf:46:8a:f5:33:af:5e:d8'
            - 'c8:14:df:0a:39:0f:38:5c:b9:c8:31:3a:da:68:30:a5'
      - run:
          name: deploy prod
          command: bash decrypt.sh && export  GITHUB_TOKEN="$(cat /tmp/git_deploy_key)" && npx semantic-release && curl https://api.render.com/deploy/srv-c2qh0oj2v8p1q1jmb410?key=BTn8FHQrn_k


workflows:
  # Below is the definition of your workflow.
  # Inside the workflow, you provide the jobs you want to run, e.g this workflow runs the build-and-test job above.
  # CircleCI will run this workflow on every commit.
  # For more details on extending your workflow, see the configuration docs: https://circleci.com/docs/2.0/configuration-reference/#workflows
  deploy:
    jobs:
      - test: 
          filters: 
            branches:
              only:
                master
      - test-release:
          filters:
            branches:
              only:
                master
          attach-workspace: true
      - lint: 
          filters:
            branches:
              only:
                - dev
                - qa
                - v0.1
      #- cypress/install:
       #   yarn: true
      #- cypress/run:
       #     executor: cypress/browsers-chrome77
        #    browser: chrome
         #   start: npx pm2 --name idea-factory start npm -- start
          #  wait-on: '-c ./wo-config.js'
          #  spec: '**/idea-factory/**'
           # post-steps:
            #  - codecov/upload:
             #     file: ./coverage/lcov.info
            #requires:
            #  - cypress/install
            #attach-workspace: true
      - dev-deploy:
          filters:
            branches:
              only:
                - dev
          requires:
            - lint
            - cypress/run
      - qa-deploy:
          filters:
            branches:
              only:
                - qa
          requires:
            - lint
            - cypress/run
      - stackhawk/hawkscan-remote:
          filters:
            branches:
              only:
                - dev
          configuration-files: stackhawk-dev.yml
          requires:
            - dev-deploy
      #- release:
       #   filters:
        #    branches:
         #     only:
          #      - master
          #requires:
           # - cypress/run
